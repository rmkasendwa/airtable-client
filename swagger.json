{
  "components": {
    "schemas": {
      "CreateWebhookRequestPayload": {
        "properties": {
          "notificationUrl": {
            "description": "An optional url that can receive notification pings. [See notification delivery](https://airtable.com/developers/web/api/webhooks-overview#webhook-notification-delivery).",
            "type": "string"
          },
          "specification": {
            "$ref": "#/components/schemas/WebhookSpecification",
            "description": "A JSON object that describe the types of changes the webhook is interested in."
          }
        },
        "required": ["specification"],
        "type": "object"
      },
      "CreateWebhookResponse": {
        "properties": {
          "expirationTime": {
            "description": "The time when the webhook expires and is disabled in the ISO format. The webhook will not expire if this is null (in the case User API keys are used)",
            "type": "string"
          },
          "id": {
            "description": "An identifier for the webhook (WebhookId).",
            "type": "string"
          },
          "macSecretBase64": {
            "description": "A MAC secret. The client should store this value to authenticate webhook pings. There is no way to retrieve this value after the initial creation of the webhook.",
            "type": "string"
          }
        },
        "required": ["id", "macSecretBase64"],
        "type": "object"
      },
      "FindAllWebhookPayloadsResponse": {
        "properties": {
          "cursor": {
            "description": "The cursor field in the response indicates the transaction number of the payload that would immediately follow the last payload returned in this request. Payloads are returned in transaction order, so the last payload's transaction number is (cursor-1), the second-to-last payload's transaction number is (cursor-2), and so on. Each payload is associated with an incrementing cursor number. If there are no returned payloads, then the cursor in the response will be the same as the cursor specified in the request. The number of the next payload to be generated can be retrieved from cursorForNextPayload in [list webhooks](https://airtable.com/developers/web/api/list-webhooks). Payloads are deleted from Airtable's servers after 1 week whether or not the client has seen them. The cursor value for the next payload is never reset, even if payloads are deleted.",
            "type": "number"
          },
          "mightHaveMore": {
            "description": "Indicates whether or not there are additional payloads. If mightHaveMore is true, the client should send another request immediately and pass in the cursor from this response.",
            "type": "boolean"
          },
          "payloads": {
            "items": {
              "$ref": "#/components/schemas/WebhookPayload"
            },
            "type": "array"
          }
        },
        "required": ["cursor", "mightHaveMore", "payloads"],
        "type": "object"
      },
      "FindAllWebhooksResponse": {
        "properties": {
          "webhooks": {
            "description": "An array of objects containing webhook objects.",
            "items": {
              "$ref": "#/components/schemas/Webhook"
            },
            "type": "array"
          }
        },
        "required": ["webhooks"],
        "type": "object"
      },
      "GenericError": {
        "additionalProperties": true,
        "properties": {
          "message": {
            "description": "An error message",
            "minLength": 1,
            "type": "string"
          },
          "name": {
            "description": "The error name",
            "minLength": 1,
            "type": "string"
          }
        },
        "required": ["message"],
        "type": "object"
      },
      "RefreshWebhookResponse": {
        "properties": {
          "expirationTime": {
            "description": "The new time when the webhook will expire and be disabled in the ISO format.",
            "type": "string"
          }
        },
        "required": ["expirationTime"],
        "type": "object"
      },
      "TableField": {
        "properties": {
          "type": {
            "enum": ["aiText"],
            "type": "string"
          }
        },
        "type": "object"
      },
      "ToggleWebhookRequestPayload": {
        "properties": {
          "enable": {
            "type": "boolean"
          }
        },
        "required": ["enable"],
        "type": "object"
      },
      "Unauthorized": {
        "properties": {
          "errors": {
            "description": "A list of related errors",
            "items": {
              "$ref": "#/components/schemas/GenericError"
            },
            "type": "array"
          },
          "message": {
            "description": "An error message",
            "minLength": 1,
            "type": "string"
          },
          "name": {
            "default": "UNAUTHORIZED",
            "description": "The error name",
            "example": "UNAUTHORIZED",
            "minLength": 1,
            "type": "string"
          },
          "stack": {
            "description": "The stack trace (only in development mode)",
            "type": "string"
          },
          "status": {
            "default": 401,
            "description": "The status code of the exception",
            "example": 401,
            "type": "number"
          }
        },
        "required": ["name", "message", "status"],
        "type": "object"
      },
      "Webhook": {
        "properties": {
          "areNotificationsEnabled": {
            "description": "Whether or not notifications are enabled for the webhook.",
            "type": "boolean"
          },
          "cursorForNextPayload": {
            "description": "The cursor associated with the next payload that will be generated. This cursor will increase every time a new payload is generated for this webhook.",
            "type": "number"
          },
          "expirationTime": {
            "description": "The time when the webhook expires and is disabled in the ISO format. The webhook will not expire if this is null (in the case User API keys are used)",
            "type": "string"
          },
          "id": {
            "description": "An identifier for the webhook (WebhookId).",
            "type": "string"
          },
          "isHookEnabled": {
            "description": "Whether or not the webhook is enabled. Webhooks may be turned off automatically such as when the specification becomes invalid. [See error codes](https://airtable.com/developers/web/api/model/webhooks-payload).",
            "type": "boolean"
          },
          "lastNotificationResult": {
            "$ref": "#/components/schemas/WebhookNotification"
          },
          "lastSuccessfulNotificationTime": {
            "description": "An identifier for the created webhook.",
            "type": "string"
          },
          "notificationUrl": {
            "description": "The url registered with the webhook. May be null if none was given.",
            "type": "string"
          },
          "specification": {
            "$ref": "#/components/schemas/WebhookSpecification",
            "description": "The specification registered with the webhook."
          }
        },
        "required": [
          "areNotificationsEnabled",
          "cursorForNextPayload",
          "id",
          "isHookEnabled",
          "specification"
        ],
        "type": "object"
      },
      "WebhookAction": {
        "properties": {
          "source": {
            "enum": [
              "client",
              "publicApi",
              "formSubmission",
              "automation",
              "system",
              "sync",
              "anonymousUser"
            ],
            "type": "string"
          },
          "sourceMetadata": {
            "oneOf": [
              {
                "$ref": "#/components/schemas/WebhookActionClientSourceMetadata"
              },
              {
                "$ref": "#/components/schemas/WebhookActionFormSubmissionSourceMetadata"
              },
              {
                "$ref": "#/components/schemas/WebhookActionAutomationSourceMetadata"
              }
            ]
          }
        },
        "required": ["source"],
        "type": "object"
      },
      "WebhookActionAutomationSourceMetadata": {
        "properties": {
          "automationId": {
            "type": "string"
          }
        },
        "required": ["automationId"],
        "type": "object"
      },
      "WebhookActionClientSourceMetadata": {
        "properties": {
          "user": {
            "$ref": "#/components/schemas/WebhooksUser"
          }
        },
        "required": ["user"],
        "type": "object"
      },
      "WebhookActionFormSubmissionSourceMetadata": {
        "properties": {
          "viewId": {
            "type": "string"
          }
        },
        "required": ["viewId"],
        "type": "object"
      },
      "WebhookNotification": {
        "properties": {
          "completionTimestamp": {
            "description": "The time of the most recent notification.",
            "type": "string"
          },
          "durationMs": {
            "description": "The roundtrip duration of the network call.",
            "type": "number"
          },
          "error": {
            "$ref": "#/components/schemas/GenericError",
            "description": "Object containing the error message."
          },
          "retryNumber": {
            "description": "The number of times the notification was retried. (0 = first try)",
            "type": "number"
          },
          "success": {
            "type": "boolean"
          },
          "willBeRetried": {
            "description": "Whether or not Airtable will attempt to deliver a notification again.",
            "type": "boolean"
          }
        },
        "required": [
          "completionTimestamp",
          "durationMs",
          "retryNumber",
          "success"
        ],
        "type": "object"
      },
      "WebhookPayload": {
        "properties": {
          "actionMetadata": {
            "$ref": "#/components/schemas/WebhookAction",
            "description": "The action responsible for the change. We may add additional sources or source metadata in the future and this will not be considered a breaking change. API consumers are expected to handle unknown sources gracefully."
          },
          "baseTransactionNumber": {
            "description": "A number which can be used to determine all changes within a transaction.",
            "type": "number"
          },
          "changedTablesById": {
            "additionalProperties": {
              "$ref": "#/components/schemas/WebhooksTableChanged"
            },
            "type": "object"
          },
          "createdTablesById": {
            "additionalProperties": {
              "$ref": "#/components/schemas/WebhooksTableCreated"
            },
            "type": "object"
          },
          "destroyedTableIds": {
            "items": {
              "type": "string"
            },
            "type": "array"
          },
          "payloadFormat": {
            "description": "The payload format's version number. This is currently just v0, but it may be increased in the future for breaking payload changes.",
            "enum": ["v0"],
            "type": "string"
          },
          "timestamp": {
            "description": "The time the action occurred.",
            "type": "string"
          }
        },
        "required": [
          "actionMetadata",
          "baseTransactionNumber",
          "payloadFormat",
          "timestamp"
        ],
        "type": "object"
      },
      "WebhookSpecification": {
        "description": "A single webhook may watch changes in a table, view, or base. The specification defines the types of the changes that are included in the webhook's payloads.\n\nNote that tables, fields, and views in the specification must be specified by ID rather than by name. You may find the IDs for each of these with the manage fields UI.\n\nRead [Webhooks specification](https://airtable.com/developers/web/api/model/webhooks-specification) to find out more",
        "properties": {
          "options": {
            "$ref": "#/components/schemas/WebhookSpecificationOptions"
          }
        },
        "required": ["options"],
        "type": "object"
      },
      "WebhookSpecificationIncludes": {
        "properties": {
          "includeCellValuesInFieldIds": {
            "description": "A list of fields to include in the payload regardless of whether or not they changed.",
            "oneOf": [
              {
                "items": {
                  "type": "string"
                },
                "type": "array"
              },
              {
                "enum": ["all"],
                "type": "string"
              }
            ]
          },
          "includePreviousCellValues": {
            "description": "If true, include the previous cell value in the payload.",
            "type": "boolean"
          },
          "includePreviousFieldDefinitions": {
            "description": "If true, include the previous field definition in the payload.",
            "type": "boolean"
          }
        },
        "type": "object"
      },
      "WebhookSpecificationOptions": {
        "properties": {
          "filters": {
            "$ref": "#/components/schemas/WebhookSpecificationOptionsFilters"
          },
          "includes": {
            "$ref": "#/components/schemas/WebhookSpecificationIncludes"
          }
        },
        "required": ["filters"],
        "type": "object"
      },
      "WebhookSpecificationOptionsFilters": {
        "properties": {
          "changeTypes": {
            "description": "Only generate payloads that contain changes of these types.",
            "items": {
              "enum": ["add", "remove", "update"],
              "type": "string"
            },
            "type": "array"
          },
          "dataTypes": {
            "description": "Only generate payloads that contain changes affecting objects of these types.\n\ntableData: record and cell value changes\ntableFields: field changes\ntableMetadata: table name and description changes",
            "items": {
              "enum": ["tableData", "tableFields", "tableMetadata"],
              "type": "string"
            },
            "type": "array"
          },
          "fromSources": {
            "description": "Only generate payloads for changes from these sources. If omitted, changes from all sources are reported.\n\nclient: changes generated by a user through the web or mobile clients\npublicApi: changes generated through the Airtable API\nformSubmission: changes generated when a form is submitted\nautomation: changes generated through an automation action\nsystem: changes generated by system events, such as processing time function formulas\nsync: changes generated through Airtable Sync",
            "items": {
              "enum": [
                "client",
                "publicApi",
                "formSubmission",
                "automation",
                "system",
                "sync",
                "anonymousUser",
                "unknown"
              ],
              "type": "string"
            },
            "type": "array"
          },
          "recordChangeScope": {
            "description": "Only generate payloads for changes in the specified TableId or ViewId.",
            "type": "string"
          },
          "sourceOptions": {
            "description": "Additional options for source filtering. This allows users to filter form submissions by ViewId.",
            "items": {
              "$ref": "#/components/schemas/WebhookSpecificationSourceOptions"
            },
            "type": "array"
          },
          "watchDataInFieldIds": {
            "description": "Only generate payloads for changes that modify values in cells in these fields. If omitted, all fields within the table/view/base are watched.",
            "items": {
              "type": "string"
            },
            "type": "array"
          },
          "watchSchemasOfFieldIds": {
            "description": "Only generate payloads for changes that modify the schemas of these fields. If omitted, schemas of all fields within the table/view/base are watched.",
            "items": {
              "type": "string"
            },
            "type": "array"
          }
        },
        "required": ["dataTypes"],
        "type": "object"
      },
      "WebhookSpecificationSourceOptions": {
        "properties": {
          "formSubmission": {
            "$ref": "#/components/schemas/WebhookSpecificationSourceOptionsFormSubmission"
          }
        },
        "type": "object"
      },
      "WebhookSpecificationSourceOptionsFormSubmission": {
        "properties": {
          "viewId": {
            "type": "string"
          }
        },
        "required": ["viewId"],
        "type": "object"
      },
      "WebhooksTableChanged": {
        "properties": {
          "changedViewsById": {
            "additionalProperties": {
              "$ref": "#/components/schemas/WebhooksViewChanged"
            },
            "description": "This is only included when recordChangeScope is a view id.\n\nThe below object is keyed with a string",
            "type": "object"
          },
          "destroyedFieldIds": {
            "items": {
              "type": "string"
            },
            "type": "array"
          },
          "destroyedRecordIds": {
            "items": {
              "type": "string"
            },
            "type": "array"
          }
        },
        "type": "object"
      },
      "WebhooksTableCreated": {
        "properties": {
          "fieldsById": {
            "additionalProperties": {
              "$ref": "#/components/schemas/WebhooksTableField"
            },
            "description": "The below object is keyed with a string",
            "type": "object"
          },
          "metadata": {
            "$ref": "#/components/schemas/WebhooksTableMetadata"
          },
          "recordsById": {
            "additionalProperties": {
              "$ref": "#/components/schemas/WebhooksTableRecord"
            },
            "description": "The below object is keyed with a string",
            "type": "object"
          }
        },
        "type": "object"
      },
      "WebhooksTableField": {
        "properties": {
          "name": {
            "type": "string"
          },
          "type": {
            "enum": [
              "singleLineText",
              "email",
              "url",
              "multilineText",
              "number",
              "percent",
              "currency",
              "singleSelect",
              "multipleSelects",
              "singleCollaborator",
              "multipleCollaborators",
              "multipleRecordLinks",
              "date",
              "dateTime",
              "phoneNumber",
              "multipleAttachments",
              "checkbox",
              "formula",
              "createdTime",
              "rollup",
              "count",
              "lookup",
              "multipleLookupValues",
              "autoNumber",
              "barcode",
              "rating",
              "richText",
              "duration",
              "lastModifiedTime",
              "button",
              "createdBy",
              "lastModifiedBy",
              "externalSyncSource",
              "aiText"
            ],
            "type": "string"
          }
        },
        "required": ["type", "name"],
        "type": "object"
      },
      "WebhooksTableMetadata": {
        "properties": {
          "description": {
            "type": "string"
          },
          "name": {
            "type": "string"
          }
        },
        "required": ["name"],
        "type": "object"
      },
      "WebhooksTableRecord": {
        "properties": {
          "cellValuesByFieldId": {
            "$ref": "#/components/schemas/TableField"
          },
          "createdTime": {
            "description": "A date timestamp in the ISO format, eg:\"2018-01-01T00:00:00.000Z\"",
            "format": "date-time",
            "type": "string"
          }
        },
        "required": ["createdTime", "cellValuesByFieldId"],
        "type": "object"
      },
      "WebhooksUser": {
        "properties": {
          "email": {
            "type": "string"
          },
          "id": {
            "type": "string"
          },
          "name": {
            "type": "string"
          },
          "permissionLevel": {
            "enum": ["none", "read", "comment", "edit", "create"],
            "type": "string"
          },
          "profilePicUrl": {
            "type": "string"
          }
        },
        "required": ["id", "email", "permissionLevel"],
        "type": "object"
      },
      "WebhooksViewChanged": {
        "properties": {
          "changedRecordsById": {
            "$ref": "#/components/schemas/WebhooksViewChangedRecordsById",
            "description": "Changed events are generated when a record in a view changes."
          },
          "createdRecordsById": {
            "$ref": "#/components/schemas/WebhooksViewCreatedRecordsById",
            "description": "Create events when a record is added or made visible to a view."
          },
          "destroyedRecordIds": {
            "description": "Destroyed events are generated when a record is deleted or removed from a view.",
            "items": {
              "type": "string"
            },
            "type": "array"
          }
        },
        "type": "object"
      },
      "WebhooksViewChangedRecordsById": {
        "properties": {
          "current": {
            "$ref": "#/components/schemas/TableField"
          },
          "previous": {
            "$ref": "#/components/schemas/TableField"
          },
          "unchanged": {
            "$ref": "#/components/schemas/TableField"
          }
        },
        "type": "object"
      },
      "WebhooksViewCreatedRecordsById": {
        "properties": {
          "cellValuesByFieldId": {
            "$ref": "#/components/schemas/TableField"
          },
          "createdTime": {
            "description": "A date timestamp in the ISO format, eg:\"2018-01-01T00:00:00.000Z\"",
            "format": "date-time",
            "type": "string"
          }
        },
        "type": "object"
      }
    },
    "securitySchemes": {
      "apikeyAuth": {
        "scheme": "apikey",
        "type": "http"
      }
    }
  },
  "info": {
    "description": "# API Reference\nThis is the reference for the Airtable API. Use the sidebar to explore the API and learn about important concepts.\n\nThe Airtable API can be used to integrate your data in Airtable with any external system. The API closely follows REST semantics, uses JSON to encode objects, and relies on standard HTTP codes to signal operation outcomes.",
    "license": {
      "name": "MIT",
      "url": "https://opensource.org/license/mit/"
    },
    "title": "Airtable",
    "version": "1.0.0"
  },
  "openapi": "3.0.0",
  "paths": {
    "/bases/{baseId}/webhooks": {
      "get": {
        "description": "Lists all webhooks that are registered for a base, along with their statuses.",
        "operationId": "findAllWebhooks",
        "parameters": [
          {
            "in": "path",
            "name": "baseId",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/FindAllWebhooksResponse"
                }
              }
            },
            "description": "The response that contains the list of webhooks."
          },
          "401": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Unauthorized"
                }
              }
            },
            "description": "A valid API key was not provided with the request. You must authenticate for all requests."
          }
        },
        "summary": "Find All Webhooks",
        "tags": ["Webhooks"]
      },
      "post": {
        "description": "Creates a new webhook in the specified base. Payloads may be generated and the notification URL (if given) will get a ping shortly after this completes.\n\nThe number of webhooks per base is limited to 10. A single OAuth integration can create up to 2 webhooks per base.\n\nEach webhook created with OAuth or personal access token will expire and be disabled after 7 days. The webhook life can be extended while it is still active by calling refresh webhook or list webhook payloads. After a webhook has expired and been disabled, the webhook's metadata and past payloads can be accessed for an additional 7 days.",
        "operationId": "createNewWebhook",
        "parameters": [
          {
            "in": "path",
            "name": "baseId",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CreateWebhookRequestPayload"
              }
            }
          }
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CreateWebhookResponse"
                }
              }
            },
            "description": "The response that contains the list of webhooks."
          },
          "401": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Unauthorized"
                }
              }
            },
            "description": "A valid API key was not provided with the request. You must authenticate for all requests."
          }
        },
        "summary": "Create New Webhook",
        "tags": ["Webhooks"]
      }
    },
    "/bases/{baseId}/webhooks/{webhookId}": {
      "delete": {
        "description": "Deletes a webhook.",
        "operationId": "deleteExistingWebhook",
        "parameters": [
          {
            "in": "path",
            "name": "baseId",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "path",
            "name": "webhookId",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "This endpoint returns an empty response on success."
          },
          "401": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Unauthorized"
                }
              }
            },
            "description": "A valid API key was not provided with the request. You must authenticate for all requests."
          }
        },
        "summary": "Delete Existing Webhook",
        "tags": ["Webhooks"]
      }
    },
    "/bases/{baseId}/webhooks/{webhookId}/enableNotifications": {
      "post": {
        "description": "Enables or disables notification pings for a webhook. See [notification delivery](https://airtable.com/developers/web/api/webhooks-overview#webhook-notification-delivery).",
        "operationId": "toggleWebhookNotifications",
        "parameters": [
          {
            "in": "path",
            "name": "baseId",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "path",
            "name": "webhookId",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ToggleWebhookRequestPayload"
              }
            }
          }
        },
        "responses": {
          "204": {
            "description": "This endpoint returns an empty response on success."
          },
          "401": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Unauthorized"
                }
              }
            },
            "description": "A valid API key was not provided with the request. You must authenticate for all requests."
          }
        },
        "summary": "Toggle Webhook Notifications",
        "tags": ["Webhooks"]
      }
    },
    "/bases/{baseId}/webhooks/{webhookId}/payloads": {
      "get": {
        "description": "Enumerate the update messages for a client to consume. Clients should call this after they receive a ping.\n\nThe webhook payload format can be found [here](https://airtable.com/developers/web/api/model/webhooks-payload) and uses [V2 cell value format](https://airtable.com/developers/web/api/field-model).\n\nCalling this endpoint will also extend the life of the webhook if it is active with an expiration time. The new expiration time will be 7 days after the list payloads call.",
        "operationId": "findAllWebhookPayloads",
        "parameters": [
          {
            "in": "path",
            "name": "baseId",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "path",
            "name": "webhookId",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "The first time this action is called, the cursor argument may be omitted from the request and will default to 1. After that, cursors should be saved between invocations of this action. When a client receives a ping, it should use the last cursor that this action returned when polling for new payloads, no matter how old that cursor value is. The cursor argument indicates the transaction number of the payload to start listing from.",
            "in": "query",
            "name": "cursor",
            "schema": {
              "type": "number"
            }
          },
          {
            "description": "If given the limit parameter specifies the maximum number of payloads to return in the response. A maximum of 50 payloads can be returned in a single request. A single payload can contain multiple updates.",
            "in": "query",
            "name": "limit",
            "schema": {
              "type": "number"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/FindAllWebhookPayloadsResponse"
                }
              }
            },
            "description": "The response that contains the list of webhook payloads."
          },
          "401": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Unauthorized"
                }
              }
            },
            "description": "A valid API key was not provided with the request. You must authenticate for all requests."
          }
        },
        "summary": "Find All Webhook Payloads",
        "tags": ["Webhooks"]
      }
    },
    "/bases/{baseId}/webhooks/{webhookId}/refresh": {
      "post": {
        "description": "Extend the life of a webhook. The new expiration time will be 7 days after the refresh time.\n\nNote that this endpoint only applies to active webhooks with an expiration time.",
        "operationId": "refreshWebhook",
        "parameters": [
          {
            "in": "path",
            "name": "baseId",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "path",
            "name": "webhookId",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/RefreshWebhookResponse"
                }
              }
            },
            "description": "This endpoint returns an empty response on success."
          },
          "401": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Unauthorized"
                }
              }
            },
            "description": "A valid API key was not provided with the request. You must authenticate for all requests."
          }
        },
        "summary": "Refresh Webhook",
        "tags": ["Webhooks"]
      }
    }
  },
  "security": [
    {
      "apikeyAuth": []
    }
  ],
  "servers": [
    {
      "description": "Production server",
      "url": "https://api.airtable.com/v0"
    }
  ],
  "tags": [
    {
      "description": "Webhooks are a user-configurable way to get programmatic notifications when data is changed in an Airtable base.\n\nNote that we don't consider adding keys to response objects a breaking change, so the shape of objects may change without notice, but existing keys won't be changed or removed without notice.",
      "name": "Webhooks"
    }
  ]
}
