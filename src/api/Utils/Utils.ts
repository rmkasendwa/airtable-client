import { join } from 'path';

import { readdirSync, rmdirSync, statSync } from 'fs-extra';

import { pkg } from '../../config';
import { AirtableField } from '../../models';

export const getCamelCaseFieldPropertyName = ({ name }: AirtableField) => {
  const camelCasePropertyName = name.toCamelCase();

  if (camelCasePropertyName.match(/^\d/g)) {
    return `_${camelCasePropertyName}`;
  }

  return camelCasePropertyName;
};

//#region Get auto-generated file warning comment
export const getGeneratedFileWarningComment = () => {
  return `
    /**
     * AUTO-GENERATED FILE
     *
     * WARNING: DO NOT MODIFY THIS FILE MANUALLY
     *
     * This file has been automatically generated by the ${pkg.name} library.
     * Any manual changes made to this file will be overwritten the next time the library is run.
     * If you need to make changes to the TypeScript definitions, modify the airtable-api.config.ts file
     * and regenerate the TypeScript code using the ${pkg.name} library.
     */
  `.trimIndent();
};
//#endregion

//#region Clean empty folder recursively
export const cleanEmptyFoldersRecursively = (folder: string) => {
  const isDir = statSync(folder).isDirectory();
  if (!isDir) {
    return;
  }
  let files = readdirSync(folder);
  if (files.length > 0) {
    files.forEach((file) => {
      const fullPath = join(folder, file);
      cleanEmptyFoldersRecursively(fullPath);
    });

    // re-evaluate files; after deleting subfolder
    // we may have parent folder empty now
    files = readdirSync(folder);
  }

  if (files.length == 0) {
    rmdirSync(folder);
    return;
  }
};
//#endregion
